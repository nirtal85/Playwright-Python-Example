# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Pre merge test

on:
  pull_request:
    branches: [ main ]

jobs:
  merge_test:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - uses: psf/black@stable
      - uses: isort/isort-action@v1
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install Dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Install xvfb and fluxbox
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: xvfb fluxbox
          version: 1.0
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Test with pytest
        run: |
          source .venv/bin/activate
          SCREEN_WIDTH=1920
          SCREEN_HEIGHT=1080
          SCREEN_DEPTH=24
          SCREEN_DPI=300
          export GEOMETRY="${SCREEN_WIDTH}""x""${SCREEN_HEIGHT}""x""${SCREEN_DEPTH}"
          export DISPLAY=:99.0
          rm -f /tmp/.X*lock
          xvfb-run --server-num=99 \
          --listen-tcp \
          --server-args="-screen 0 ${GEOMETRY} -fbdir /var/tmp -dpi ${SCREEN_DPI} -listen tcp -noreset -ac +extension RANDR" \
          fluxbox -display :99.0 2&1>/dev/null &
          exec $@
          pytest -m devRun --base-url ${{ vars.BASE_URL }}
      - name: Auto-assign reviewers
        uses: kentaro-m/auto-assign-action@v2.0.0
        if: success()
      - name: Store Playwright Traces and Videos From Failed Tests
        if: failure()
        uses: actions/upload-artifact@v4.3.3
        id: artifact-upload-step
        with:
          name: test-results
          path: test-results/
          retention-days: 7
      - name: Link Playwright Traces And Videos To Allure Report
        working-directory: allure-results
        if: failure()
        run: echo ARTIFACT_URL=${{ steps.artifact-upload-step.outputs.artifact-url }} >> environment.properties
      - name: Link Git Information And Browser Version To Allure Report
        working-directory: allure-results
        if: always()
        run: |
          {
           echo BUILD_URL=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
           echo GIT_BRANCH=${{ github.head_ref || github.ref_name }}
           echo GIT_COMMIT_ID=${{ github.sha }}
           echo GIT_COMMIT_MESSAGE=$(git show -s --format=%s HEAD)
           echo GIT_COMMIT_AUTHOR_NAME=$(git show -s --format='%ae' HEAD)
           echo GIT_COMMIT_TIME=$(git show -s --format=%ci HEAD)
           echo CHROME_VERSION=$(google-chrome --product-version)
          } >> environment.properties
      - name: Generate Allure Report
        uses: simple-elf/allure-report-action@master
        if: always()
        id: allure-report
        with:
          allure_results: allure-results
          allure_report: allure-report
          gh_pages: gh-pages
          allure_history: allure-history
      - name: Deploy Report To Github Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v4
        with:
          PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISH_BRANCH: gh-pages
          PUBLISH_DIR: allure-history
